import java.util.HashMap;
import java.util.Map;

class UserMainCode {

    public int findPassword(int input1, int input2, int input3, int input4, int input5) {
        int stableSum = 0;
        int unstableSum = 0;

        if (isStable(input1)) {
            stableSum += input1;
        } else {
            unstableSum += input1;
        }

        if (isStable(input2)) {
            stableSum += input2;
        } else {
            unstableSum += input2;
        }

        if (isStable(input3)) {
            stableSum += input3;
        } else {
            unstableSum += input3;
        }

        if (isStable(input4)) {
            stableSum += input4;
        } else {
            unstableSum += input4;
        }

        if (isStable(input5)) {
            stableSum += input5;
        } else {
            unstableSum += input5;
        }
        return stableSum - unstableSum;
    }

    private static boolean isStable(int n) {
        String numStr = String.valueOf(Math.abs(n));
        
        if (numStr.length() == 0) {
            return true; 
        }
        
        Map<Character, Integer> frequencyMap = new HashMap<>();

        for (char digit : numStr.toCharArray()) {
            int count = frequencyMap.containsKey(digit) ? frequencyMap.get(digit) : 0;
            frequencyMap.put(digit, count + 1);
        }

        if (frequencyMap.isEmpty()) {
            return true;
        }
        
        int firstDigitFrequency = frequencyMap.get(numStr.charAt(0));

        for (int frequency : frequencyMap.values()) {
            if (frequency != firstDigitFrequency) {
                return false;
            }
        }

        return true;
    }
}
